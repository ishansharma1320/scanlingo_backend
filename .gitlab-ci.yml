# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - deploy_primary_template
  - build_and_push_docker_image


deploy_primary_template:
  stage: deploy_primary_template
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
   - aws cloudformation deploy --template-file cloud_formation/ScanLingoPrimaryStack.json --stack-name ScanLingoPrimaryStack --no-fail-on-empty-changeset
   - if aws cloudformation describe-stacks --stack-name ScanLingoPrimaryStack &> /dev/null; then
        aws cloudformation wait stack-update-complete --stack-name ScanLingoPrimaryStack
     fi
   - aws cloudformation describe-stacks --stack-name PrimaryStack --query "Stacks[0].Outputs" > stack-outputs.json
    # Extract the values from the outputs and set them as environment variables
  artifacts:
    paths:
      - stack-outputs.json


build_and_push_docker_image:
  stage: build_and_push_docker_image
  image: docker:latest
  services:
    - docker:dind
  variables:
    # Environment variables for AWS credentials
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  script:
    - echo "Creating environment file..."
    - ECR_REPO_URL=$(jq -r '.[] | select(.OutputKey=="ECRRepoURL") | .OutputValue' stack-outputs.json)
    - DOCKER_IMAGE_PUSH_COMMAND=$(jq -r '.[] | select(.OutputKey=="DockerImagePushCommand") | .OutputValue' stack-outputs.json)
    # Create an environment file to store AWS credentials
    - echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
    - echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
    - echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> .env
    - echo "AWS_REGION=$AWS_DEFAULT_REGION" >> .env
    
    - $DOCKER_IMAGE_PUSH_COMMAND
    - docker build -t scanlingo-core-backend:$CI_JOB_ID -t scanlingo-core-backend:latest  . --no-cache
    - docker tag scanlingo-core-backend:$CI_JOB_ID $ECR_REPO_URL:latest
    - docker tag scanlingo-core-backend:$CI_JOB_ID $ECR_REPO_URL:$CI_JOB_ID
    - docker push $ECR_REPO_URL/scanlingo-core-backend:latest
    - docker push $ECR_REPO_URL/scanlingo-core-backend:$CI_JOB_ID


# build_and_push_docker_image:
#   stage: build_and_push_docker_image
#   script:
#     - docker build -t your-docker-image:latest path/to/your/app
#     - docker login -u $ECR_USER -p $ECR_PASSWORD your-ecr-repo-url
#     - docker tag your-docker-image:latest your-ecr-repo-url:latest
#     - docker push your-ecr-repo-url:latest

# deploy_secondary_template:
#   stage: deploy_secondary_template
#   script:
#     - aws cloudformation deploy --template-file path/to/secondary-stack.yml